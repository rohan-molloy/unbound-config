# Enable global ratelimiting of queries accepted per ip address.  If
# 0, the default, it is disabled.  This option  is  experimental  at
# this  time.   The  ratelimit  is  in  queries  per second that are
# allowed.  More queries are completely dropped and will not receive
# a  reply,  SERVFAIL  or otherwise.  IP ratelimiting happens before
# looking in the cache. This may be useful for mitigating amplifica-
# tion attacks.
ip-ratelimit: 1000

# Give  the  size of the data structure in which the current ongoing
# rates are kept track in.  Default 4m.  In bytes  or  use  m(mega),
# k(kilo),  g(giga).   The  ip ratelimit structure is small, so this
# data structure likely does not need to be large.
ip-ratelimit-size: 4m

# Give power of 2 number of slabs, this is used to reduce lock  con-
# tention in the ip ratelimit tracking data structure.  Close to the
# number of cpus is a fairly good setting.
ip-ratelimit-slabs: 4

# Set the amount  of  queries  to  rate  limit  when  the  limit  is
# exceeded.   If  set  to  0,  all queries are dropped for addresses
# where the limit is exceeded.  If set to another value, 1  in  that
# number  is  allowed  through to complete.  Default is 10, allowing
# 1/10 traffic to flow normally.  This  can  make  ordinary  queries
# complete  (if repeatedly queried for), and enter the cache, whilst
# also mitigating the traffic flow by the facto
ip-ratelimit-factor: 10

# Enable  ratelimiting  of queries sent to nameserver for performing
# recursion.  If 0, the default, it is  disabled.   This  option  is
# experimental at this time.  The ratelimit is in queries per second
# that are allowed.  More queries are  turned  away  with  an  error
# (servfail).   This stops recursive floods, eg. random query names,
# but not spoofed reflection floods.  Cached responses are not rate-
# limited  by  this setting.  The zone of the query is determined by
# examining the nameservers for it, the zone name is  used  to  keep
# track  of  the rate.  For example, 1000 may be a suitable value to
# stop the server from being overloaded with random names, and keeps
# unbound from sending traffic to the nameservers for those zones.
ratelimit: 0

# Give  the  size of the data structure in which the current ongoing
# rates are kept track in.  Default 4m.  In bytes  or  use  m(mega),
# k(kilo),  g(giga).  The ratelimit structure is small, so this data
# structure likely does not need to be large.
ratelimit-size: 4m

# Give power of 2 number of slabs, this is used to reduce lock  con-
# tention  in  the  ratelimit tracking data structure.  Close to the
# number of cpus is a fairly good setting.
ratelimit-slabs: 4

# Set the amount  of  queries  to  rate  limit  when  the  limit  is
# exceeded.   If set to 0, all queries are dropped for domains where
# the limit is exceeded.  If set to another value, 1 in that  number
# is  allowed  through  to  complete.   Default is 10, allowing 1/10
# traffic to flow normally.  This can make ordinary queries complete
# (if repeatedly queried for), and enter the cache, whilst also mit-
# igating the traffic flow by the factor given.
ratelimit-factor: 10

# Override the global ratelimit for an exact match domain name  with
# the  listed  number.   You  can give this for any number of names.
# For example, for a top-level-domain you may want to have a  higher
# limit  than  other  names.  A value of 0 will disable ratelimiting
# for that domain.
ratelimit-for-domain: example.com 1000

# Override the global ratelimit for a domain name that ends in  this
# name.  You can give this multiple times, it then describes differ-
# ent settings in different parts of  the  namespace.   The  closest
# matching  suffix is used to determine the qps limit.  The rate for
# the  exact  matching  domain  name  is  not  changed,  use   rate-
# limit-for-domain to set that, you might want to use different set-
# tings for a top-level-domain and subdomains.  A value  of  0  will
# disable ratelimiting for domain names that end in this name.
ratelimit-below-domain: com 1000